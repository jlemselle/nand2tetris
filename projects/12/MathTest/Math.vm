function Math.init 0
push constant 16
call Array.new 1
pop static 0
push static 0
push constant 0
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 1
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 2
add
push constant 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 3
add
push constant 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 4
add
push constant 16
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 5
add
push constant 32
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 6
add
push constant 64
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 7
add
push constant 128
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 8
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 9
add
push constant 512
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 10
add
push constant 1024
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 11
add
push constant 2048
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 12
add
push constant 4096
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 13
add
push constant 8192
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 14
add
push constant 16384
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 15
add
push constant 32767
not
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Math.abs 0
push argument 0
push constant 0
gt
not
if-goto ELSE0
push argument 0
return
goto IF_END0
label ELSE0
label IF_END0
push argument 0
neg
return
function Math.multiply 3
push constant 0
pop local 0
push argument 0
pop local 1
push constant 0
pop local 2
label WHILE1
push local 2
push constant 16
lt
not
if-goto WHILE_END1
push argument 1
push local 2
call Math.bit 2
not
if-goto ELSE2
push local 0
push local 1
add
pop local 0
goto IF_END2
label ELSE2
label IF_END2
push local 1
push local 1
add
pop local 1
push local 2
push constant 1
add
pop local 2
goto WHILE1
label WHILE_END1
push local 0
return
function Math.bit 0
push argument 0
push static 0
push argument 1
add
pop pointer 1
push that 0
and
push constant 0
eq
not
return
function Math.divide 1
push argument 0
call Math.abs 1
push argument 1
call Math.abs 1
call Math.divideImpl 2
pop local 0
push argument 0
push constant 0
lt
push argument 1
push constant 0
lt
not
and
push argument 0
push constant 0
lt
not
push argument 1
and
push constant 0
lt
or
not
if-goto ELSE3
push local 0
neg
return
goto IF_END3
label ELSE3
push local 0
return
label IF_END3
function Math.divideImpl 1
push argument 0
call Math.abs 1
pop argument 0
push argument 1
call Math.abs 1
pop argument 1
push argument 1
push argument 0
gt
push argument 1
push constant 0
lt
or
not
if-goto ELSE4
push constant 0
return
goto IF_END4
label ELSE4
label IF_END4
push argument 0
push argument 1
push argument 1
add
call Math.divide 2
pop local 0
push argument 0
push local 0
push local 0
add
push argument 1
call Math.multiply 2
sub
push argument 1
lt
not
if-goto ELSE5
push local 0
push local 0
add
return
goto IF_END5
label ELSE5
push local 0
push local 0
add
push constant 1
add
return
label IF_END5
function Math.sqrt 3
push constant 0
pop local 0
push constant 7
pop local 1
push constant 0
pop local 2
label WHILE6
push local 1
push constant 0
lt
not
not
if-goto WHILE_END6
push local 0
push static 0
push local 1
add
pop pointer 1
push that 0
add
pop local 2
push local 2
push local 2
call Math.multiply 2
pop local 2
push local 2
push argument 0
gt
not
push local 2
push constant 0
gt
and
not
if-goto ELSE7
push local 0
push static 0
push local 1
add
pop pointer 1
push that 0
add
pop local 0
goto IF_END7
label ELSE7
label IF_END7
push local 1
push constant 1
sub
pop local 1
goto WHILE6
label WHILE_END6
push local 0
return
function Math.max 0
push argument 0
push argument 1
gt
not
if-goto ELSE8
push argument 0
return
goto IF_END8
label ELSE8
label IF_END8
push argument 1
return
function Math.min 0
push argument 0
push argument 1
lt
not
if-goto ELSE9
push argument 0
return
goto IF_END9
label ELSE9
label IF_END9
push argument 1
return
