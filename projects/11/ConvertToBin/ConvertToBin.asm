// BOOTSTRAP

@256
D=A
@SP
M=D
// CALL SYS.INIT 0

@RETURN.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@LCL
M=D
@5
D=D-A
@ARG
M=D
@Sys.init
0;JMP
(RETURN.0)




// FUNCTION MAIN.MAIN 1

(Main.main)
@SP
A=M
M=0
@SP
M=M+1


// PUSH CONSTANT 8001

@8001
D=A
@SP
A=M
M=D
@SP
M=M+1


// PUSH CONSTANT 16

@16
D=A
@SP
A=M
M=D
@SP
M=M+1


// PUSH CONSTANT 1

@1
D=A
@SP
A=M
M=D
@SP
M=M+1


// NEG

@SP
A=M-1
D=M
M=-D


// CALL MAIN.FILLMEMORY 3

@RETURN.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@LCL
M=D
@8
D=D-A
@ARG
M=D
@Main.fillMemory
0;JMP
(RETURN.1)


// PUSH CONSTANT 8000

@8000
D=A
@SP
A=M
M=D
@SP
M=M+1


// CALL MEMORY.PEEK 1

@RETURN.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@LCL
M=D
@6
D=D-A
@ARG
M=D
@Memory.peek
0;JMP
(RETURN.2)


// POP LOCAL 0

@SP
AM=M-1
D=M
@LCL
A=M
M=D


// PUSH LOCAL 0

@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1


// CALL MAIN.CONVERT 1

@RETURN.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@LCL
M=D
@6
D=D-A
@ARG
M=D
@Main.convert
0;JMP
(RETURN.3)


// RETURN

@LCL
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@LCL
D=M
@1
A=D-A
D=M
@THAT
M=D
@LCL
D=M
@2
A=D-A
D=M
@THIS
M=D
@LCL
D=M
@3
A=D-A
D=M
@ARG
M=D
@LCL
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP


// FUNCTION MAIN.CONVERT 3

(Main.convert)
@SP
A=M
M=0
@SP
M=M+1
A=M
M=0
@SP
M=M+1
A=M
M=0
@SP
M=M+1


// PUSH CONSTANT 0

@0
D=A
@SP
A=M
M=D
@SP
M=M+1


// NOT

@SP
A=M-1
D=M
M=!D


// POP LOCAL 2

@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D


// LABEL MAIN.CONVERT$WHILE0

(Main.convert$WHILE0)


// PUSH LOCAL 2

@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1


// NOT

@SP
A=M-1
D=M
M=!D


// IF-GOTO MAIN.CONVERT$WHILE_END0

@SP
AM=M-1
D=M
@Main.convert$WHILE_END0
D;JNE


// PUSH LOCAL 1

@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1


// PUSH CONSTANT 1

@1
D=A
@SP
A=M
M=D
@SP
M=M+1


// ADD

@SP
M=M-1
A=M
D=M
A=A-1
D=M+D
M=D


// POP LOCAL 1

@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D


// PUSH LOCAL 0

@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1


// CALL MAIN.NEXTMASK 1

@RETURN.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@LCL
M=D
@6
D=D-A
@ARG
M=D
@Main.nextMask
0;JMP
(RETURN.4)


// POP LOCAL 0

@SP
AM=M-1
D=M
@LCL
A=M
M=D


// PUSH LOCAL 1

@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1


// PUSH CONSTANT 16

@16
D=A
@SP
A=M
M=D
@SP
M=M+1


// GT

@SP
M=M-1
A=M
D=M
A=A-1
D=M-D
@IS_TRUE.5
D;JGT
D=0
@IS_FALSE.5
0;JMP
(IS_TRUE.5)
D=-1
(IS_FALSE.5)
@SP
A=M-1
M=D


// NOT

@SP
A=M-1
D=M
M=!D


// NOT

@SP
A=M-1
D=M
M=!D


// IF-GOTO MAIN.CONVERT$ELSE1

@SP
AM=M-1
D=M
@Main.convert$ELSE1
D;JNE


// PUSH LOCAL 0

@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1


// AND

@SP
M=M-1
A=M
D=M
A=A-1
D=M&D
M=D


// PUSH CONSTANT 0

@0
D=A
@SP
A=M
M=D
@SP
M=M+1


// EQ

@SP
M=M-1
A=M
D=M
A=A-1
D=M-D
@IS_ZERO.6
D;JEQ
D=-1
(IS_ZERO.6)
@SP
A=M-1
M=!D


// NOT

@SP
A=M-1
D=M
M=!D


// NOT

@SP
A=M-1
D=M
M=!D


// IF-GOTO MAIN.CONVERT$ELSE2

@SP
AM=M-1
D=M
@Main.convert$ELSE2
D;JNE


// PUSH CONSTANT 8000

@8000
D=A
@SP
A=M
M=D
@SP
M=M+1


// PUSH LOCAL 1

@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1


// ADD

@SP
M=M-1
A=M
D=M
A=A-1
D=M+D
M=D


// PUSH CONSTANT 1

@1
D=A
@SP
A=M
M=D
@SP
M=M+1


// CALL MEMORY.POKE 2

@RETURN.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@LCL
M=D
@7
D=D-A
@ARG
M=D
@Memory.poke
0;JMP
(RETURN.7)


// GOTO MAIN.CONVERT$IF_END2

@Main.convert$IF_END2
0;JMP


// LABEL MAIN.CONVERT$ELSE2

(Main.convert$ELSE2)


// PUSH CONSTANT 8000

@8000
D=A
@SP
A=M
M=D
@SP
M=M+1


// PUSH LOCAL 1

@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1


// ADD

@SP
M=M-1
A=M
D=M
A=A-1
D=M+D
M=D


// PUSH CONSTANT 0

@0
D=A
@SP
A=M
M=D
@SP
M=M+1


// CALL MEMORY.POKE 2

@RETURN.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@LCL
M=D
@7
D=D-A
@ARG
M=D
@Memory.poke
0;JMP
(RETURN.8)


// LABEL MAIN.CONVERT$IF_END2

(Main.convert$IF_END2)


// GOTO MAIN.CONVERT$IF_END1

@Main.convert$IF_END1
0;JMP


// LABEL MAIN.CONVERT$ELSE1

(Main.convert$ELSE1)


// PUSH CONSTANT 0

@0
D=A
@SP
A=M
M=D
@SP
M=M+1


// POP LOCAL 2

@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D


// LABEL MAIN.CONVERT$IF_END1

(Main.convert$IF_END1)


// GOTO MAIN.CONVERT$WHILE0

@Main.convert$WHILE0
0;JMP


// LABEL MAIN.CONVERT$WHILE_END0

(Main.convert$WHILE_END0)


// RETURN

@LCL
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@LCL
D=M
@1
A=D-A
D=M
@THAT
M=D
@LCL
D=M
@2
A=D-A
D=M
@THIS
M=D
@LCL
D=M
@3
A=D-A
D=M
@ARG
M=D
@LCL
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP


// FUNCTION MAIN.NEXTMASK 0

(Main.nextMask)
@SP


// PUSH CONSTANT 0

@0
D=A
@SP
A=M
M=D
@SP
M=M+1


// EQ

@SP
M=M-1
A=M
D=M
A=A-1
D=M-D
@IS_ZERO.9
D;JEQ
D=-1
(IS_ZERO.9)
@SP
A=M-1
M=!D


// NOT

@SP
A=M-1
D=M
M=!D


// IF-GOTO MAIN.NEXTMASK$ELSE3

@SP
AM=M-1
D=M
@Main.nextMask$ELSE3
D;JNE


// PUSH CONSTANT 1

@1
D=A
@SP
A=M
M=D
@SP
M=M+1


// RETURN

@LCL
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@LCL
D=M
@1
A=D-A
D=M
@THAT
M=D
@LCL
D=M
@2
A=D-A
D=M
@THIS
M=D
@LCL
D=M
@3
A=D-A
D=M
@ARG
M=D
@LCL
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP


// GOTO IF_END3

@IF_END3
0;JMP


// LABEL ELSE3

(ELSE3)


// PUSH CONSTANT 2

@2
D=A
@SP
A=M
M=D
@SP
M=M+1


// CALL MATH.MULTIPLY 2

@RETURN.10
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@LCL
M=D
@7
D=D-A
@ARG
M=D
@Math.multiply
0;JMP
(RETURN.10)


// RETURN

@LCL
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@LCL
D=M
@1
A=D-A
D=M
@THAT
M=D
@LCL
D=M
@2
A=D-A
D=M
@THIS
M=D
@LCL
D=M
@3
A=D-A
D=M
@ARG
M=D
@LCL
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP


// LABEL IF_END3

(IF_END3)


// FUNCTION MAIN.FILLMEMORY 0

(Main.fillMemory)
@SP


// LABEL MAIN.FILLMEMORY$WHILE4

(Main.fillMemory$WHILE4)


// PUSH CONSTANT 0

@0
D=A
@SP
A=M
M=D
@SP
M=M+1


// GT

@SP
M=M-1
A=M
D=M
A=A-1
D=M-D
@IS_TRUE.11
D;JGT
D=0
@IS_FALSE.11
0;JMP
(IS_TRUE.11)
D=-1
(IS_FALSE.11)
@SP
A=M-1
M=D


// NOT

@SP
A=M-1
D=M
M=!D


// IF-GOTO MAIN.FILLMEMORY$WHILE_END4

@SP
AM=M-1
D=M
@Main.fillMemory$WHILE_END4
D;JNE


// CALL MEMORY.POKE 2

@RETURN.12
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@LCL
M=D
@7
D=D-A
@ARG
M=D
@Memory.poke
0;JMP
(RETURN.12)


// PUSH CONSTANT 1

@1
D=A
@SP
A=M
M=D
@SP
M=M+1


// SUB

@SP
M=M-1
A=M
D=M
A=A-1
D=M-D
M=D


// PUSH CONSTANT 1

@1
D=A
@SP
A=M
M=D
@SP
M=M+1


// ADD

@SP
M=M-1
A=M
D=M
A=A-1
D=M+D
M=D


// GOTO MAIN.FILLMEMORY$WHILE4

@Main.fillMemory$WHILE4
0;JMP


// LABEL MAIN.FILLMEMORY$WHILE_END4

(Main.fillMemory$WHILE_END4)


// RETURN

@LCL
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@LCL
D=M
@1
A=D-A
D=M
@THAT
M=D
@LCL
D=M
@2
A=D-A
D=M
@THIS
M=D
@LCL
D=M
@3
A=D-A
D=M
@ARG
M=D
@LCL
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP


