// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = ~32767;
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, xOffset;
        let address = (32 * y) + (x / 16);
        let value = Memory.peek(16384 + address);

        let xOffset = x;
        while (xOffset > 16) {
            let xOffset = xOffset - 16;
        }
        
        if (color) {
            let value = value | twoToThe[xOffset];
        } else {
            let value = value & (~twoToThe[xOffset]);
        }

        do Memory.poke(16384 + address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var boolean slope;
        let slope = Math.abs(y1 - y0) < Math.abs(x1 - x0);
        if (slope & x0 > x1)
        {
            do plotLineLow(x1, y1, x0, y0);
        }
        else if (slope & ~(x0 > x1))
        {
            do plotLineLow(x0, y0, x1, y1);
        }
        else if (~slope & y0 > y1)
        {
            do plotLineLow(x1, y1, x0, y0);
        }
        else
        {
            do plotLineLow(x0, y0, x1, y1);
        }

        return;
    }

    function void plotLineLow(int x0, int y0, int x1, int y1) {
        var int dx, dy, yi, D, x, y;

        let dx = x1 - x0;
        let dy = y1 - y0;
        let yi = 1;
        if (dy < 0)
        {
            let yi = -1;
            let dy = -dy;
        }
        let D = dy + dy - dx;
        let y = y0;

        let x = x0;
        while (x < x1)
        {
            do drawPixel(x, y);
            if (D > 0)
            {
                let y = y + yi;
                let D = D - (dx + dx);
            }
            let D = D + dy + dy;
            let x = x + 1;
        }
        return;
    }

    function void plotLineHigh(int x0, int y0, int x1, int y1) {
        var int dx, dy, xi, D, x, y;

        let dx = x1 - x0;
        let dy = y1 - y0;
        let xi = 1;
        if (dx < 0)
        {
            let xi = -1;
            let dx = -dx;
        }
        let D = dx + dx - dy;
        let x = x0;

        let y = y0;
        while (y < y1)
        {
            do drawPixel(x, y);
            if (D > 0)
            {
                let x = x + xi;
                let D = D - (dy + dy);
            }
            let D = D + dy + dy;
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        return;
    }
}
