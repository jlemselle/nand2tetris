// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array twoToThe;
    static Array ram;

    /** Initializes the Screen. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 32767 + 1;
        let color = true;
        let ram = 0;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int c;
        let c = 16384;
        while (~(c > 24576)) {
            let ram[c] = 0;
            let c = c + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, xOffset;
        let address = (32 * y) + (x / 16);
        let value = Memory.peek(16384 + address);

        let xOffset = x;
        while (~(xOffset < 16)) {
            let xOffset = xOffset - 16;
        }
        
        if (color) {
            let value = value | twoToThe[xOffset];
        } else {
            let value = value & (~(twoToThe[xOffset]));
        }

        do Memory.poke(16384 + address, value);
        return;
    }
    
    function void drawLine(int x1, int y1, int x2, int y2) {
        if (Math.abs(y2 - y1) < Math.abs(x2 - x1)) {
            if (x1 > x2) {
                do Screen.drawLineImpl(x2, y2, x1, y1, false);
            } else {
                do Screen.drawLineImpl(x1, y1, x2, y2, false);
            }
        } else {
            if (y1 > y2) {
                do Screen.drawLineImpl(y2, x2, y1, x1, true);
            } else {
                do Screen.drawLineImpl(y1, x1, y2, x2, true);
            }
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLineImpl(int a1, int b1, int a2, int b2, boolean isHigh) {
        var int D, a, b, da, db, bi;
        let da = a2 - a1;
        let db = b2 - b1;
        let a = a1;
        let b = b1;
        let D = (db + db) - da;
        let bi = 1;

        if (db < 0) {
            let bi = -1;
            let db = -db;
        }

        while (~(a > a2)) {
            if (isHigh) {
                do Screen.drawPixel(b, a);
            } else {
                do Screen.drawPixel(a, b);
            }

            if (D > 0) {
                let b = b + bi;
                let D = D - (da + da);
            }

            let D = D + db + db;
            let a = a + 1;
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int x, y;

        let y = y1;
        while (~(y > y2)) {
            let x = x1;
            while (~(x > x2)) {
                do Screen.drawPixel(x, y);
                let x = x + 1;
            }
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, dx;
        let dy = -r;
        while (~(dy > r)) {
            let dx = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawLine(x - dx, y + dy, x + dx, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
