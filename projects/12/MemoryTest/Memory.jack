// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {

    static Array ram, heap;
    static int freeListPtr;
    static int listEnd;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeListPtr = heap;
        let listEnd = 0;
        let heap[0] = listEnd;
        let heap[1] = 14334;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int prevPtr, ptr, segmentSize, baseAddr, newSize, newNext, newPtr;

        let prevPtr = listEnd;
        let ptr = freeListPtr;
        let segmentSize = size + 2;
        while (~(ptr = listEnd) & (ram[ptr + 1] < segmentSize))
        {
            let prevPtr = ptr;
            let ptr = ram[ptr];
        }

        if (ptr = listEnd)
        {
            do Sys.error(1);
        }

        let baseAddr = ptr + 2;
        let newSize = ram[ptr + 1] - segmentSize;
        let newNext = ram[ptr];
        let newPtr = ptr + segmentSize;

        if (ptr = freeListPtr)
        {
            let freeListPtr = newPtr;
        }
        if (~(prevPtr = listEnd))
        {
            let ram[prevPtr] = newPtr;
        }

        let ram[newPtr] = newNext;
        let ram[newPtr + 1] = newSize;

        return baseAddr;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let o[-2] = freeListPtr;
        let freeListPtr = o - 2;
        return;
    }
}
